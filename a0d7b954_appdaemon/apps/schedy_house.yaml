schedy_house: # This is our app instance name.
  module: hass_apps_loader
  class: SchedyApp

  debug: false

  reset_at_startup: true

  actor_type: thermostat

  expression_environment: |
    def house_mode():
      return state("input_select.house_mode")

    def house_vacant():
      return state("input_boolean.house_vacant")

    def season():
      return state('input_select.season')

    def gareth_location():
      return (state('person.gareth_2'))

    def varina_location():
      return (state('person.varina_2'))

    def ch_extended():
      return (state('input_boolean.ch_extended'))

    def ch_manual():
      return (state('input_boolean.central_heating_manual'))

    def setback_disable():
      return (state('input_boolean.setback_disable'))
      
    def shack_occupied():
      return (state('input_boolean.shack_occupied'))

    def livingroom_occupied():
      return (state('input_boolean.livingroom_occupied'))

    def bedroom_2_occupied():
      return (state('input_boolean.bedroom_2_occupied'))

    def simulate_bedtime():
      return (state('input_boolean.simulate_bedtime'))

  schedule_snippets:

  watched_entities:
    - input_boolean.bedroom_2_occupied
    - input_boolean.central_heating_manual
    - input_boolean.ch_extended
    - input_boolean.house_vacant
    - input_boolean.livingroom_occupied
    - input_boolean.setback_disable
    - input_boolean.shack_occupied
    - input_boolean.simulate_bedtime
    - input_select.house_mode
    - input_select.season
    - person.gareth_2
    - person.varina_2
  schedule_prepend:
    # Heating on very low if we are away or it is summer season
    - x: "4 if house_mode() == 'Away' or season() == 'Summer' else Next()"

  # default rule to apply if no other matches
  schedule_append:
    - v: 15

  rooms:
    bedroom_1:
      rescheduling_delay: 60
      actors:
        climate.bedroom_1_thermostat:
      schedule:
        # Nothing needed in Spring season
        - x: "4 if season() == 'Spring' else Next()"

        # Knock back the target temps if we are both out of the house
        - x: "15 if gareth_location() == 'not_home' and varina_location() == 'not_home' and setback_disable() == 'off' else Next()"

        # Warm in mornings and evenings
        - v: 19.0
          rules:
            - { start: "07:00", end: "08:00" }
            - { start: "19:00", end: "22:30" }

            # Otherwise, low level overnight
        - v: 17.0
          rules:
            - { start: "22:30", end: "07:00+1d" }

    bedroom_2:
      rescheduling_delay: 0
      actors:
        climate.bedroom_2_thermostat:
      schedule:
        # Nothing needed in Spring
        - x: "4 if season() == 'Spring' else Next()"

        # Low if Varina is not home
        - x: "15 if varina_location() == 'not_home' else Next()"

        # Low if we have gone to bed early
        - x: "15 if simulate_bedtime() == 'on' else Next()"

        # Winter
        # Ignore occupancy first thing to get room warm
        - v: 21
          rules:
            - { start: "07:00", end: "09:00" }

            # Otherwise, drop back if room is unoccupied
        - v: 21
          rules:
            - x: "17.0 if bedroom_2_occupied() == 'off' else Next() "
            - { start: "09:00", end: "22:30" }

    landing:
      actors:
        climate.landing_radiator_thermostat:
      schedule:
        - v: 20
          rules:
            # Knock back the target temps if we are both out of the house
            - x: "15 if gareth_location() == 'not_home' and varina_location() == 'not_home' and setback_disable() == 'off' else Next()"

            # Set at base level during the day and evening
            - { start: "07:00", end: "22:00" }

    livingroom:
      rescheduling_delay: 0
      replicate_changes: true
      actors:
        climate.livingroom_thermostat:
      schedule:
        # Override if we've gone to bed early
        - x: "15 if simulate_bedtime() == 'on' else Next()"

        # Do nothing if CH is on manual
        - x: "20 if ch_manual() == 'on' else Next()"

        # Stay on if CH extended
        - x: " 20 if ch_extended() == 'on' else Next() "

        # Otherwise
        # Only heat in the evening during Spring season
        - v: 20
          rules:
            - x: "Next() if season() == 'Spring' else Break()"

            # Knock back the target temps if we are both out of the house
            - x: "15 if gareth_location() == 'not_home' and varina_location() == 'not_home' and setback_disable() == 'off' else Next()"

            # Medium if the room is unoccupied
            - x: "17 if livingroom_occupied() == 'off' else Next() "
            - { start: "18:00", end: "22:30" }
        # Heat all day in Winter season
        # Ignore occupancy in the early morning, just get the room warm
        # Knock back the target temps if we are both out of the house
        - x: "15 if gareth_location() == 'not_home' and varina_location() == 'not_home' and setback_disable() == 'off' else Next()"

        - v: 20
          rules:
            - { start: "07:00", end: "09:00" }
        # Thereafter, drop back if the room is unoccupied
        - v: 20
          rules:
            - x: "17 if livingroom_occupied() == 'off' else Next() "
            - { start: "09:00", end: "17:00" }

        - v: 20
          rules:
            - x: "17 if livingroom_occupied() == 'off' else Next() "
            - { start: "17:00", end: "22:30" }
