####################################################
#                                                  #
#                 Dashboard Sidebar                #
#                                                  #
####################################################

- unique_id: sidebar
  state: template
  attributes:
    # Display current time
    time: >
      {% set hours = now().strftime('%H') %}
      {% set minutes = now().strftime('%M') %}
      <span class="time">
        {{ hours }}<span class="time-colon">:</span>{{ minutes }}
      </span>
    # Ditto date
    date: >
      <font color='#6a7377'><b><blink>
      {% if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
      {% set days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
      {% set months = ['January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'] %}
        {{ days[now().weekday()] }}<br>
        {{ strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
      {% endif %}
      </blink></b></font>

    # Display an appropriate greeting
    greet: >
      <b>
      {% set time = now().hour %}
      {% if time <= 1 %} Good night {{'\U0001F611'}}
      {% elif time <= 3 %} Good night {{'\U0001F62A'}}
      {% elif time <= 5 %} Good night {{'\U0001F634'}}
      {% elif time <= 7 %} Good morning {{'\U0001F4A9'}}
      {% elif time <= 9 %} Good morning {{'\u2615\uFE0F'}}
      {% elif time <= 10 %} Good morning {{'\U0001F642'}}
      {% elif time <= 13 %} Good afternoon {{'\U0001F60A'}}
      {% elif time <= 15 %} Good afternoon {{'\U0001F60E'}}
      {% elif time <= 17 %} Good afternoon {{'\U0001F44B\U0001F3FB'}}
      {% elif time <= 19 %} Good evening {{'\U0001F44B\U0001F3FB'}}
      {% elif time <= 22 %} Good evening {{'\U0001F60C'}}
      {% elif time <= 23 %} Good evening {{'\U0001F974'}}
      {% else %} Good day {{'\U0001F974'}}
      {% endif %}
      </b>

    # Display alert if master alarm is sounding
    master_alarm: >
      <font color=red><b>
      {% set alarm = states('binary_sensor.master_alarm') %}
      {% if alarm == 'on' %}
      <b>Master Alarm is Sounding!</b>
      {% endif %}
      </b></font>

    # Show which lights or switches are on at the moment
    active: >
      <b>
      {% set lights = [
        states.switch.livingroom_standard_lamps,
        states.light.ikea_light01,
        
      ] %}

      {% set switches = [
        states.switch.shack_power_switch,
        states.switch.shed_fan,
        states.switch.ikea_switch03,
        
      ] %}

      {% set media_players = [
        states.media_player.sony_bravia_tv
      ] %}

      {% set lights_on = lights | selectattr('state','eq','on') | list %}
      {% set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

      {% set switches_on = switches | selectattr('state','eq','on') | list %}
      {% set media_players_playing = media_players | selectattr('state','eq','playing') | list %}
      {% set append = switches_on + media_players_playing %}
      {% set switches_name = append | map(attribute='name') | join(', ') %}

      {% if (lights_on | length == 0) and (switches_on | length == 1) %}
        {{switches_name}} is on

      {% elif (lights_on | length == 0) and (switches_on | length > 0) %}
        {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

      {% elif (lights_on | length == 1) and (switches_on | length == 1) %}
        {{ lights_name }} and {{switches_name }} are on

      {% elif (lights_on | length == 1) and (switches_on | length > 1) %}
        {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

      {% elif (lights_on | length > 1) and (switches_on | length == 1) %}
        {{ lights_on | length }} lights and {{ switches_name }} are on

      {% elif (lights_on | length > 1) and (switches_on | length > 1) %}
        {{ lights_on | length }} lights, {{ switches_name | regex_replace(',([^,]*)$',' and\\1') }} are on

      {% elif (lights_on | length == 1) and (switches_on | length == 0) %}
        {{ lights_name }} is on

      {% elif (lights_on | length > 1) and (switches_on | length == 0) %}
        {{ lights_on | length }} lights are on

      {% else %}
        <font color='#6a7377'>Everything is off</font>
      {% endif %}
      </b>
    # Current weather
    weather: >
      {% set temperature = states('sensor.openweathermap_temperature') %}
      {% set apparent = states('sensor.openweathermap_feels_like_temperature') | round %}
      {% set precip = states('sensor.openweathermap_forecast_precipitation') | round %}
      {% if not is_state('sensor.openweathermap_temperature', 'unknown') %}
        {% if temperature | float(default=0) <= 0.0 %}
          Feels like {{ apparent }}째 with {{ precip }}% risk of snow {{'\u2744\uFE0F'}}
        {% elif temperature | float(default=0) > 0.0 %}
          Feels like {{ apparent}}째 with {{ precip }}% risk of rain {{ '\u2614\uFE0F' if precip > 30 }}
        {% endif %}
      {% else %}
        Can't get weather information...
      {% endif %}
    #battery: >
    #  {% set entities = states.sensor
    #    | selectattr('entity_id', 'search', 'battery')
    #    | rejectattr('entity_id', 'search', 'iphone')
    #    | map(attribute = 'entity_id') | list %}
    #  {% for sensor in entities if states(sensor) != 'unknown' and states(sensor) !=
    #  'unavailable' and states(sensor) != 'None' and states(sensor) | int(default=0) <= 1.5 %}
    #    {% if loop.first %} {{'\u26A0\uFE0F'}} Battery {% else %}, {% endif %}
    #    {{ state_attr(sensor, 'friendly_name') }} {{ states(sensor) }}%
    #  {% endfor %}

#          nas: >
#            {% if is_state('binary_sensor.nas_internet_access', 'off') %}
#              {{'\u26A0\uFE0F'}} Kontrollera NAS internet책tkomst
#            {% endif %}

#- unique_id: updates
#  state: template
#  attributes:
#          esphome: >
#            {% macro f(e) %}
#              {{- states('sensor.gosund_' + e + '_esphome_version') -}}
#            {% endmacro %}
#            {% set group = [f('monitors'), f('ac'), f('fan')] | min %}
#            {% set installed = group.split()[0] %}
#            {% set latest = states('sensor.esphome_version_latest') %}
#            {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
#            {% if installed != latest %}
#              <b><a href="#" onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#            {% endif %}
#          playactor: >
#            {% set installed = states('sensor.playactor_version_installed') %}
#            {% set latest = states('sensor.playactor_version_latest') %}
#            {% set url = 'https://github.com/dhleong/playactor/releases/latest' %}
#            {% if installed != latest %}
#              <b><a href="#" onclick="window.open('{{ url }}');">playactor</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#            {% endif %}
#          kemperprofiler: >
#            {% set installed = state_attr('sensor.kemper_version', 'profiler_installed') %}
#            {% set latest = state_attr('sensor.kemper_version', 'profiler_latest') %}
#            {% set url = 'https://www.kemper-amps.com/downloads' %}
#            {% if installed != latest %}
#              <b><a href="#" onclick="window.open('{{ url }}');">Kemper Profiler OS</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#            {% endif %}
#          rigmanager: >
#            {% set installed = state_attr('sensor.kemper_version', 'rigmanager_installed') %}
#            {% set latest = state_attr('sensor.kemper_version', 'rigmanager_latest') %}
#            {% set url = 'https://www.kemper-amps.com/downloads' %}
#            {% if installed != latest %}
#              <b><a href="#" onclick="window.open('{{ url }}');">Rig Manager</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#            {% endif %}
#          unifi: >
#            {% set installed = states('sensor.template_udm_version') %}
#            {% set url = 'https://community.ui.com/releases?q=dream+machine' %}
#            {% if is_state('binary_sensor.template_udm_upgradable', 'on') %}
#              <b><a href="#" onclick="window.open('{{ url }}');">UniFi Dream Machine ({{ installed }})</a></b> uppdatering tillg채nglig
#            {% endif %}
#          synology: >
#            {% set installed = state_attr('update.nas_dsm_update', 'installed_version') %}
#            {% set latest = state_attr('update.nas_dsm_update', 'latest_version') %}
#            {% set url = 'https://www.synology.com/en-global/releaseNote/DSM' %}
#            {% if is_state('update.nas_dsm_update', 'on') %}
#              <b><a href="#" onclick="window.open('{{ url }}');">Synology DSM</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
#            {% endif %}

- unique_id: domain_counter
  state: >
    {{ states | count }}
    attributes:
      automation: >
        {{ states.automation | count }}
      binary_sensor: >
        {{ states.binary_sensor | count }}
      device_tracker: >
        {{ states.device_tracker | count }}
      light: >
        {{ states.light | count }}
      media_player: >
        {{ states.media_player | count }}
      sensor: >
        {{ states.sensor | count }}
      switch: >
        {{ states.switch | count }}
      other: >
        {% set exclude = this.attributes | list %}
        {{ states | rejectattr('domain', 'in', exclude) | list | count }}

#      - unique_id: udm_cpu
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[0] | default }}
#        attributes:
#          friendly_name: Processor
#          icon: mdi:chip
#          unit_of_measurement: "%"

#      - unique_id: udm_cpu_temp
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[1] | default }}
#        attributes:
#          friendly_name: Processortemperatur
#          icon: mdi:thermometer
#          unit_of_measurement: "째C"

#      - unique_id: udm_mem
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[2] | default }}
#        attributes:
#          friendly_name: Minne
#          icon: mdi:memory
#          unit_of_measurement: "%"

#      - unique_id: udm_disk
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[3] | default }}
#        attributes:
#          friendly_name: Lagring
#          icon: mdi:harddisk
#          unit_of_measurement: "%"

#      - unique_id: udm_uptime
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[5] | default }}
#        attributes:
#          friendly_name: Senaste omstart
#          device_class: timestamp

#      - unique_id: udm_version
#        state: >
#          {{ states('sensor.udm_unifios').split('|\n')[6] | default }}
#        attributes:
#          friendly_name: Version
#          icon: mdi:router-wireless

#      - unique_id: nas_status
#        state: >
#          {% set entity_id = 'sensor.nas_volume_1_status' %}
#          {% if is_state(entity_id, 'normal') %}
#            Bra
#          {% elif is_state(entity_id, 'background_scrubbing') %}
#            Dataskrubbning
#          {% else %}
#            {{ states(entity_id) }}
#          {% endif %}
#        attributes:
#          friendly_name: Systemh채lsa
#          icon: custom:synology-nas

- unique_id: hass_version
  state: >
    {{ 'Up to Date' if states('sensor.hass_version_installed') ==
    states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}
  attributes:
    friendly_name: >
      Installed {{ states('sensor.hass_version_installed') }}
    icon: mdi:home-assistant

- unique_id: hass_dev_release
  state: >
    {% set start_time = state_attr('calendar.home_assistant_devs', 'start_time') %}
    {{ (as_timestamp(start_time, default=0) + 60*60*20.5) | timestamp_local(default) }}
  attributes:
    friendly_name: >
      {% set release = state_attr('calendar.home_assistant_devs','message') %}
      {% if release == 'Home Assistant Core Beta Release' %}
        Latest beta
      {% elif release == 'Home Assistant Core Release' %}
        Latest release
      {% else %}
        {{ release }}
      {% endif %}
    icon: mdi:dev-to
    device_class: timestamp

- unique_id: fullykiosk_last_app_start
  state: >
    {{ as_timestamp(states('sensor.galaxy_tab_a_last_app_start'), default=0) | timestamp_local(default=0) }}
  attributes:
    friendly_name: Latest restart
    icon: mdi:update
    device_class: timestamp

- unique_id: fullykiosk_storage
  state: >
    {% set FreeSpace = states('sensor.galaxy_tab_a_internal_storage_free_space') | float(default=0) %}
    {% set TotalSpace = states('sensor.galaxy_tab_a_internal_storage_total_space') | float(default=0) %}
    {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
      {{ 100 - (FreeSpace / TotalSpace * 100) | int(default=0) }}
    {% endif %}
  attributes:
    friendly_name: Storage
    icon: mdi:sd
    unit_of_measurement: "%"

- unique_id: fullykiosk_memory
  state: >
    {% set FreeMemory = states('sensor.galaxy_tab_a_ram_free_memory') | float(default=0) %}
    {% set TotalMemory = states('sensor.galaxy_tab_a_ram_total_memory') | float(default=0) %}
    {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
      {{ 100 - (FreeMemory / TotalMemory * 100) | int(default=0) }}
    {% endif %}
  attributes:
    friendly_name: Memory
    icon: mdi:memory
    unit_of_measurement: "%"
