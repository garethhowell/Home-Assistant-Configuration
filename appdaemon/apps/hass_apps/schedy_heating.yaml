schedy_heating: # This is our app instance name.
  module: hass_apps_loader
  class: SchedyApp

  debug: true

  reset_at_startup: true

  actor_type: thermostat

  expression_environment: |
    def house_mode():
      return state("input_select.house_mode")

    def house_vacant():
      return state("input_boolean.house_vacant")

    def season():
      return state('input_select.season')

    def gareth_location():
      return (state('device_tracker.ghip7plus'))

    def varina_location():
      return (state('device_tracker.v_iphone'))

    def ch_extended():
      return (state('input_boolean.ch_extended'))

    def setback_disable():
      return (state('input_boolean.setback_disable'))
      
    def shack_occupied():
      return (state('input_boolean.shack_occupied'))

    def simulate_bedtime():
      return (state('input_boolean.simulate_bedtime'))

  schedule_snippets:

  watched_entities:
    - input_boolean.ch_extended
    - input_boolean.house_vacant
    - input_boolean.setback_disable
    - input_boolean.shack_occupied
    - input_boolean.simulate_bedtime
    - input_select.house_mode
    - input_select.season
    - device_tracker.ghip7plus
    - device_tracker.v_iphone # Varina's iPhone

  schedule_prepend:
    - x: "6 if house_mode() == 'Away' or season() == 'Summer' else Next()"
    - x: "15 if gareth_location() == 'not_home' and varina_location() == 'not_home' and setback_disable() == 'off' else Next()"

  # default rule to apply if no other matches
  schedule_append:
    - v: 15

  rooms:
    bedroom_1:
      rescheduling_delay: 60
      actors:
        climate.bedroom_1_thermostat:
      schedule:
        - x: "15 if season() == 'Spring' else Next()"
        - v: 16
          rules:
            - { start: "19:00", end: "09:00+1d" }

    bedroom_2:
      rescheduling_delay: 0
      actors:
        climate.bedroom_2_thermostat:
      schedule:
        - x: "15 if season() == 'Spring' else Next()"
        - x: "15 if varina_location() == 'not_home' else Next()"
        - x: "15 if simulate_bedtime() == 'on' else Next()"
        - v: 20
          rules:
            - { start: "07:00", end: "21:00" }

    landing:
      actors:
        climate.landing_radiator_thermostat:
      schedule:
        - v: 19
          rules:
            - { start: "07:00", end: "22:00" }

    livingroom:
      rescheduling_delay: 0
      replicate_changes: true
      actors:
        climate.livingroom_thermostat:
      schedule:
        - x: "15 if simulate_bedtime() == 'on' else Next()"
        - v: 19
          rules:
            - { start: "07:00", end: "22:30" }

    shack:
      rescheduling_delay: 0
      actors:
        climate.shack_thermostat:
      schedule:
        - x: "6 if season() == 'Spring' else Next()"
        - v: 6
          rules:
            - { start: "22:00", end: "08:30+1d" }
        - x: "6 if gareth_location() == 'not_home' else Next()"
        - x: "6 if shack_occupied() == 'off' else Next()"
        - v: 19
          rules:
            - { start: "08:30", end: "22:00" }
