schedy_heating:  # This is our app instance name.
  module: hass_apps_loader
  class: SchedyApp

  debug: true

  reset_at_startup: false

  actor_type: thermostat

  expression_environment: |
    def home_tomorrow():
      return state("input_boolean.home_tomorrow")

    def house_mode():
      return state("input_select.house_mode")

    def house_vacant():
      return state("input_boolean.house_vacant")

    def season():
      return state("input_select.season")

    def gareth_location():
      return (state('device_tracker.life360_gareth'))

    def varina_location():
      return (state('device_tracker.life360_varina'))

  schedule_snippets:

  watched_entities:
    - input_boolean.home_tomorrow
    - input_boolean.house_vacant
    - input_select.house_mode
    - input_select.season
    - device_tracker.life360_gareth
    - device_tracker.life360_varina

  schedule_prepend:


  # default rule to apply if no other matches
  schedule_append:
    - v: 17

  rooms:
    bedroom_1:
      rescheduling_delay: 60
      actors:
        climate.bedroom_1_radiator_thermostat:
      schedule:
        - x: "10 if house_mode() == 'Away' else Next()"
        - x: "11 if season() == 'Summer' else Next()"
        - x: "17 if gareth_location() == 'not_home' and varina_location() == 'not_home' else Next()"
        - v: 19
          rules:
            - { start: "07:00", end: "09:00" }
            - { start: "19:00", end: "22:00" }

    bedroom_2:
      rescheduling_delay: 0
      actors:
        climate.bedroom_2_radiator_thermostat:
      schedule:
        - x: "10 if house_mode() == 'Away' else Next()"
        - x: "11 if season() == 'Summer' else Next()"
        - x: "17 if varina_location() == 'not_home' else Next()"
        - v: 22
          rules:
            - weekdays: 1-7
              rules:
              - rules:
                - x: "Next() if house_mode() == 'Home - Normal Day' else Break()"
                - { start: "07:00", end: "09:00" }
                - { start: "17:00", end: "22:00" }
              - rules:
                - x: "Next() if house_mode() == 'Home - Home Day' else Break()"
                - { start: "07:00", end: "22:00" }

    landing:
      actors:
        climate.landing_radiator_thermostat:
      schedule:
        - x: "10 if house_mode() == 'Away' else Next()"
        - x: "11 if season() == 'Summer' else Next()"
        - x: "17 if gareth_location() == 'not_home' and varina_location() == 'not_home' else Next()"
        - v: 22
          rules:
            - weekdays: 1-5
              rules:
              - rules:
                - x: "Next() if house_mode() == 'Home - Normal Day' else Break()"
                - { start: "07:00", end: "09:00" }
                - { start: "17:00", end: "22:00" }
              - rules:
                - x: "Next() if house_mode() == 'Home - Home Day' else Break()"
                - { start: "07:00", end: "22:00" }
            - weekdays: 6-7
              rules:
                - { start: "07:00", end: "22:00" }

    livingroom:
      rescheduling_delay: 0
      replicate_changes: true
      actors:
        climate.livingroom_radiator_thermostat:
        climate.diningroom_radiator_thermostat:
      schedule:
        - x: "10 if house_mode() == 'Away' else Next()"
        - x: "11 if season() == 'Summer' else Next()"
        - x: "17 if gareth_location() == 'not_home' and varina_location() == 'not_home' else Next()"
        - v: 22
          rules:
            - weekdays: 1-5
              rules:
              - rules:
                - x: "Next() if house_mode() == 'Home - Normal Day' else Break()"
                - { v: 23, start: "19:00", end: "22:30"}
                - { start: "07:00", end: "09:00" }
                - { start: "17:00", end: "19:00" }
              - rules:
                - x: "Next() if house_mode() == 'Home - Home Day' else Break()"
                - { v: 23, start: "19:00", end: "22:30"}
                - { start: "07:00", end: "19:00" }
            - weekdays: 6-7
              rules:
                - { v: 23, start: "19:00", end: "22:30"}
                - { start: "07:00", end: "19:00" }

    shack:
      rescheduling_delay: 0
      actors:
        climate.shack_thermostat:
      schedule:
        - x: "10 if house_mode() == 'Away' else Next()"
        - x: "11 if season() == 'Summer' else Next()"
        - x: "17 if gareth_location() == 'not_home' else Next()"
        - v: 19
          rules:
            - { start: "08:30", end: "22:00" }
